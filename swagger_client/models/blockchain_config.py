# coding: utf-8

"""
    PDF stamper

    The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com

    OpenAPI spec version: 1.0
    Contact: dev@sphereon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class BlockchainConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, blockchain_anchors=None, proof_config_name=None):
        """
        BlockchainConfig - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'blockchain_anchors': 'list[str]',
            'proof_config_name': 'str'
        }

        self.attribute_map = {
            'blockchain_anchors': 'blockchainAnchors',
            'proof_config_name': 'proofConfigName'
        }

        self._blockchain_anchors = blockchain_anchors
        self._proof_config_name = proof_config_name

    @property
    def blockchain_anchors(self):
        """
        Gets the blockchain_anchors of this BlockchainConfig.
        The states at which to create a blockchain anchor. This can be the original file (before stamp)the stamped file, or both

        :return: The blockchain_anchors of this BlockchainConfig.
        :rtype: list[str]
        """
        return self._blockchain_anchors

    @blockchain_anchors.setter
    def blockchain_anchors(self, blockchain_anchors):
        """
        Sets the blockchain_anchors of this BlockchainConfig.
        The states at which to create a blockchain anchor. This can be the original file (before stamp)the stamped file, or both

        :param blockchain_anchors: The blockchain_anchors of this BlockchainConfig.
        :type: list[str]
        """
        allowed_values = []
        if blockchain_anchors not in allowed_values:
            raise ValueError(
                "Invalid value for `blockchain_anchors` ({0}), must be one of {1}"
                .format(blockchain_anchors, allowed_values)
            )

        self._blockchain_anchors = blockchain_anchors

    @property
    def proof_config_name(self):
        """
        Gets the proof_config_name of this BlockchainConfig.
        The blockchain proof configuration name to use. The name has to be created in the blockchain-proof API

        :return: The proof_config_name of this BlockchainConfig.
        :rtype: str
        """
        return self._proof_config_name

    @proof_config_name.setter
    def proof_config_name(self, proof_config_name):
        """
        Sets the proof_config_name of this BlockchainConfig.
        The blockchain proof configuration name to use. The name has to be created in the blockchain-proof API

        :param proof_config_name: The proof_config_name of this BlockchainConfig.
        :type: str
        """

        self._proof_config_name = proof_config_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
