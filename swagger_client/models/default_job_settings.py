# coding: utf-8

"""
    PDF stamper

    The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com

    OpenAPI spec version: 1.0
    Contact: dev@sphereon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class DefaultJobSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, variables=None, result_settings=None, form_fields=None, input_settings=None):
        """
        DefaultJobSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'variables': 'dict(str, str)',
            'result_settings': 'ResultSettings',
            'form_fields': 'dict(str, str)',
            'input_settings': 'InputSettings'
        }

        self.attribute_map = {
            'variables': 'variables',
            'result_settings': 'resultSettings',
            'form_fields': 'formFields',
            'input_settings': 'inputSettings'
        }

        self._variables = variables
        self._result_settings = result_settings
        self._form_fields = form_fields
        self._input_settings = input_settings

    @property
    def variables(self):
        """
        Gets the variables of this DefaultJobSettings.
        A map with key-values used to replace template variables in components. These are optional defaults. Values in job specific variables will overwrite default values.

        :return: The variables of this DefaultJobSettings.
        :rtype: dict(str, str)
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """
        Sets the variables of this DefaultJobSettings.
        A map with key-values used to replace template variables in components. These are optional defaults. Values in job specific variables will overwrite default values.

        :param variables: The variables of this DefaultJobSettings.
        :type: dict(str, str)
        """

        self._variables = variables

    @property
    def result_settings(self):
        """
        Gets the result_settings of this DefaultJobSettings.
        The default result file and lifecycle settings

        :return: The result_settings of this DefaultJobSettings.
        :rtype: ResultSettings
        """
        return self._result_settings

    @result_settings.setter
    def result_settings(self, result_settings):
        """
        Sets the result_settings of this DefaultJobSettings.
        The default result file and lifecycle settings

        :param result_settings: The result_settings of this DefaultJobSettings.
        :type: ResultSettings
        """

        self._result_settings = result_settings

    @property
    def form_fields(self):
        """
        Gets the form_fields of this DefaultJobSettings.
        Form fields are filled out in PDF forms. These are default values used in the job. Please note that these are different from variables, as the latter can only be used for text, barcode and hyperlink components, whilst the form-fields as the name implies are for filling out PDF forms

        :return: The form_fields of this DefaultJobSettings.
        :rtype: dict(str, str)
        """
        return self._form_fields

    @form_fields.setter
    def form_fields(self, form_fields):
        """
        Sets the form_fields of this DefaultJobSettings.
        Form fields are filled out in PDF forms. These are default values used in the job. Please note that these are different from variables, as the latter can only be used for text, barcode and hyperlink components, whilst the form-fields as the name implies are for filling out PDF forms

        :param form_fields: The form_fields of this DefaultJobSettings.
        :type: dict(str, str)
        """

        self._form_fields = form_fields

    @property
    def input_settings(self):
        """
        Gets the input_settings of this DefaultJobSettings.
        The default input file and lifecycle settings

        :return: The input_settings of this DefaultJobSettings.
        :rtype: InputSettings
        """
        return self._input_settings

    @input_settings.setter
    def input_settings(self, input_settings):
        """
        Sets the input_settings of this DefaultJobSettings.
        The default input file and lifecycle settings

        :param input_settings: The input_settings of this DefaultJobSettings.
        :type: InputSettings
        """

        self._input_settings = input_settings

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
