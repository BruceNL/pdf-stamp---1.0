# coding: utf-8

"""
    PDF stamper

    The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com

    OpenAPI spec version: 1.0
    Contact: dev@sphereon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class StamperConfigResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, config_resources=None, config=None):
        """
        StamperConfigResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'config_resources': 'list[StreamLocation]',
            'creation_time': 'datetime',
            'config_id': 'str',
            'name': 'str',
            'update_time': 'datetime',
            'config_status': 'str',
            'config': 'StamperConfig',
            'status_message': 'str'
        }

        self.attribute_map = {
            'config_resources': 'configResources',
            'creation_time': 'creationTime',
            'config_id': 'configId',
            'name': 'name',
            'update_time': 'updateTime',
            'config_status': 'configStatus',
            'config': 'config',
            'status_message': 'statusMessage'
        }

        self._creation_time = None
        self._config_id = None
        self._name = None
        self._update_time = None
        self._config_status = None
        self._status_message = None
        self._config_resources = config_resources
        self._config = config

    @property
    def config_resources(self):
        """
        Gets the config_resources of this StamperConfigResponse.
        Any registered resource used by the configuration

        :return: The config_resources of this StamperConfigResponse.
        :rtype: list[StreamLocation]
        """
        return self._config_resources

    @config_resources.setter
    def config_resources(self, config_resources):
        """
        Sets the config_resources of this StamperConfigResponse.
        Any registered resource used by the configuration

        :param config_resources: The config_resources of this StamperConfigResponse.
        :type: list[StreamLocation]
        """

        self._config_resources = config_resources

    @property
    def creation_time(self):
        """
        Gets the creation_time of this StamperConfigResponse.
        The creation date/time of the initial configuration in ISO 8601 format

        :return: The creation_time of this StamperConfigResponse.
        :rtype: datetime
        """
        return self._creation_time

    @property
    def config_id(self):
        """
        Gets the config_id of this StamperConfigResponse.
        The configuration id

        :return: The config_id of this StamperConfigResponse.
        :rtype: str
        """
        return self._config_id

    @property
    def name(self):
        """
        Gets the name of this StamperConfigResponse.
        An optional configuration name

        :return: The name of this StamperConfigResponse.
        :rtype: str
        """
        return self._name

    @property
    def update_time(self):
        """
        Gets the update_time of this StamperConfigResponse.
        The last update date/time of this configuration in ISO 8601 format

        :return: The update_time of this StamperConfigResponse.
        :rtype: datetime
        """
        return self._update_time

    @property
    def config_status(self):
        """
        Gets the config_status of this StamperConfigResponse.
        The status of the config action

        :return: The config_status of this StamperConfigResponse.
        :rtype: str
        """
        return self._config_status

    @property
    def config(self):
        """
        Gets the config of this StamperConfigResponse.
        The PDF stamper configuration

        :return: The config of this StamperConfigResponse.
        :rtype: StamperConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """
        Sets the config of this StamperConfigResponse.
        The PDF stamper configuration

        :param config: The config of this StamperConfigResponse.
        :type: StamperConfig
        """

        self._config = config

    @property
    def status_message(self):
        """
        Gets the status_message of this StamperConfigResponse.
        A status message, which can be informational, warning or error. A message here does not indicate an error per se

        :return: The status_message of this StamperConfigResponse.
        :rtype: str
        """
        return self._status_message

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
