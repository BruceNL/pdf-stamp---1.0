# coding: utf-8

"""
    PDF stamper

    The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com

    OpenAPI spec version: 1.0
    Contact: dev@sphereon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Lifecycle(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, applicable_job_statuses=None, action_time=None, action=None, type=None):
        """
        Lifecycle - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'applicable_job_statuses': 'list[str]',
            'action_time': 'datetime',
            'action': 'str',
            'type': 'str'
        }

        self.attribute_map = {
            'applicable_job_statuses': 'applicableJobStatuses',
            'action_time': 'actionTime',
            'action': 'action',
            'type': 'type'
        }

        self._applicable_job_statuses = applicable_job_statuses
        self._action_time = action_time
        self._action = action
        self._type = type

    @property
    def applicable_job_statuses(self):
        """
        Gets the applicable_job_statuses of this Lifecycle.
        Job status needs to be in this list in order for the action to be performed!

        :return: The applicable_job_statuses of this Lifecycle.
        :rtype: list[str]
        """
        return self._applicable_job_statuses

    @applicable_job_statuses.setter
    def applicable_job_statuses(self, applicable_job_statuses):
        """
        Sets the applicable_job_statuses of this Lifecycle.
        Job status needs to be in this list in order for the action to be performed!

        :param applicable_job_statuses: The applicable_job_statuses of this Lifecycle.
        :type: list[str]
        """
        allowed_values = []
        if applicable_job_statuses not in allowed_values:
            raise ValueError(
                "Invalid value for `applicable_job_statuses` ({0}), must be one of {1}"
                .format(applicable_job_statuses, allowed_values)
            )

        self._applicable_job_statuses = applicable_job_statuses

    @property
    def action_time(self):
        """
        Gets the action_time of this Lifecycle.
        The time at which the job and files will be deleted, regardless of whether it has been retrieved or not. Maximal time is 1 day from job creation

        :return: The action_time of this Lifecycle.
        :rtype: datetime
        """
        return self._action_time

    @action_time.setter
    def action_time(self, action_time):
        """
        Sets the action_time of this Lifecycle.
        The time at which the job and files will be deleted, regardless of whether it has been retrieved or not. Maximal time is 1 day from job creation

        :param action_time: The action_time of this Lifecycle.
        :type: datetime
        """

        self._action_time = action_time

    @property
    def action(self):
        """
        Gets the action of this Lifecycle.
        The action to perform. Currently only delete is supported

        :return: The action of this Lifecycle.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this Lifecycle.
        The action to perform. Currently only delete is supported

        :param action: The action of this Lifecycle.
        :type: str
        """
        allowed_values = ["DELETE", "NONE"]
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def type(self):
        """
        Gets the type of this Lifecycle.
        Determine when to delete the job and associated files.  RETRIEVAL means delete directly after retrieving the PDF file. When the file has not been retrieved before the action time, it will be deleted regardless.  Time means, delete on specific time, regardless of whether it has been processed

        :return: The type of this Lifecycle.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Lifecycle.
        Determine when to delete the job and associated files.  RETRIEVAL means delete directly after retrieving the PDF file. When the file has not been retrieved before the action time, it will be deleted regardless.  Time means, delete on specific time, regardless of whether it has been processed

        :param type: The type of this Lifecycle.
        :type: str
        """
        allowed_values = ["RETRIEVAL", "TIME"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
