# coding: utf-8

"""
    PDF stamper

    The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com

    OpenAPI spec version: 1.0
    Contact: dev@sphereon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class StamperConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, blockchain_config=None, default_job_settings=None, config_resources_location=None, canvas_components=None):
        """
        StamperConfig - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'blockchain_config': 'BlockchainConfig',
            'default_job_settings': 'DefaultJobSettings',
            'config_resources_location': 'StorageLocation',
            'canvas_components': 'list[CanvasComponent]'
        }

        self.attribute_map = {
            'blockchain_config': 'blockchainConfig',
            'default_job_settings': 'defaultJobSettings',
            'config_resources_location': 'configResourcesLocation',
            'canvas_components': 'canvasComponents'
        }

        self._blockchain_config = blockchain_config
        self._default_job_settings = default_job_settings
        self._config_resources_location = config_resources_location
        self._canvas_components = canvas_components

    @property
    def blockchain_config(self):
        """
        Gets the blockchain_config of this StamperConfig.
        Optional blockchain proof configuration. This is applicable to all stamps created using this configuration. 

        :return: The blockchain_config of this StamperConfig.
        :rtype: BlockchainConfig
        """
        return self._blockchain_config

    @blockchain_config.setter
    def blockchain_config(self, blockchain_config):
        """
        Sets the blockchain_config of this StamperConfig.
        Optional blockchain proof configuration. This is applicable to all stamps created using this configuration. 

        :param blockchain_config: The blockchain_config of this StamperConfig.
        :type: BlockchainConfig
        """

        self._blockchain_config = blockchain_config

    @property
    def default_job_settings(self):
        """
        Gets the default_job_settings of this StamperConfig.
        Default job settings. Values omitted from the job will get default settings specified in here

        :return: The default_job_settings of this StamperConfig.
        :rtype: DefaultJobSettings
        """
        return self._default_job_settings

    @default_job_settings.setter
    def default_job_settings(self, default_job_settings):
        """
        Sets the default_job_settings of this StamperConfig.
        Default job settings. Values omitted from the job will get default settings specified in here

        :param default_job_settings: The default_job_settings of this StamperConfig.
        :type: DefaultJobSettings
        """

        self._default_job_settings = default_job_settings

    @property
    def config_resources_location(self):
        """
        Gets the config_resources_location of this StamperConfig.
        The storage location where the configuration resources will be stored

        :return: The config_resources_location of this StamperConfig.
        :rtype: StorageLocation
        """
        return self._config_resources_location

    @config_resources_location.setter
    def config_resources_location(self, config_resources_location):
        """
        Sets the config_resources_location of this StamperConfig.
        The storage location where the configuration resources will be stored

        :param config_resources_location: The config_resources_location of this StamperConfig.
        :type: StorageLocation
        """

        self._config_resources_location = config_resources_location

    @property
    def canvas_components(self):
        """
        Gets the canvas_components of this StamperConfig.
        The canvas components containing the information of the stamp

        :return: The canvas_components of this StamperConfig.
        :rtype: list[CanvasComponent]
        """
        return self._canvas_components

    @canvas_components.setter
    def canvas_components(self, canvas_components):
        """
        Sets the canvas_components of this StamperConfig.
        The canvas components containing the information of the stamp

        :param canvas_components: The canvas_components of this StamperConfig.
        :type: list[CanvasComponent]
        """

        self._canvas_components = canvas_components

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
