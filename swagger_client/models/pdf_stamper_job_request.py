# coding: utf-8

"""
    PDF stamper

    The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com

    OpenAPI spec version: 1.0
    Contact: dev@sphereon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PdfStamperJobRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, job_lifecycles=None, inline_config=None, variables=None, result_settings=None, config_ids=None, input_results=None, form_fields=None, input_settings=None):
        """
        PdfStamperJobRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'job_lifecycles': 'list[Lifecycle]',
            'inline_config': 'StamperConfig',
            'variables': 'dict(str, str)',
            'result_settings': 'ResultSettings',
            'config_ids': 'list[str]',
            'input_results': 'list[InputResultLocation]',
            'form_fields': 'dict(str, str)',
            'input_settings': 'InputSettings'
        }

        self.attribute_map = {
            'job_lifecycles': 'jobLifecycles',
            'inline_config': 'inlineConfig',
            'variables': 'variables',
            'result_settings': 'resultSettings',
            'config_ids': 'configIds',
            'input_results': 'inputResults',
            'form_fields': 'formFields',
            'input_settings': 'inputSettings'
        }

        self._job_lifecycles = job_lifecycles
        self._inline_config = inline_config
        self._variables = variables
        self._result_settings = result_settings
        self._config_ids = config_ids
        self._input_results = input_results
        self._form_fields = form_fields
        self._input_settings = input_settings

    @property
    def job_lifecycles(self):
        """
        Gets the job_lifecycles of this PdfStamperJobRequest.
        The lifecycles of the job itself

        :return: The job_lifecycles of this PdfStamperJobRequest.
        :rtype: list[Lifecycle]
        """
        return self._job_lifecycles

    @job_lifecycles.setter
    def job_lifecycles(self, job_lifecycles):
        """
        Sets the job_lifecycles of this PdfStamperJobRequest.
        The lifecycles of the job itself

        :param job_lifecycles: The job_lifecycles of this PdfStamperJobRequest.
        :type: list[Lifecycle]
        """

        self._job_lifecycles = job_lifecycles

    @property
    def inline_config(self):
        """
        Gets the inline_config of this PdfStamperJobRequest.
        Optional job specific config that can be supplied inline. Will be merged with the specified configuration. 

        :return: The inline_config of this PdfStamperJobRequest.
        :rtype: StamperConfig
        """
        return self._inline_config

    @inline_config.setter
    def inline_config(self, inline_config):
        """
        Sets the inline_config of this PdfStamperJobRequest.
        Optional job specific config that can be supplied inline. Will be merged with the specified configuration. 

        :param inline_config: The inline_config of this PdfStamperJobRequest.
        :type: StamperConfig
        """

        self._inline_config = inline_config

    @property
    def variables(self):
        """
        Gets the variables of this PdfStamperJobRequest.
        A map with key-values used to replace template variables in components.

        :return: The variables of this PdfStamperJobRequest.
        :rtype: dict(str, str)
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """
        Sets the variables of this PdfStamperJobRequest.
        A map with key-values used to replace template variables in components.

        :param variables: The variables of this PdfStamperJobRequest.
        :type: dict(str, str)
        """

        self._variables = variables

    @property
    def result_settings(self):
        """
        Gets the result_settings of this PdfStamperJobRequest.
        The result file and lifecycle settings

        :return: The result_settings of this PdfStamperJobRequest.
        :rtype: ResultSettings
        """
        return self._result_settings

    @result_settings.setter
    def result_settings(self, result_settings):
        """
        Sets the result_settings of this PdfStamperJobRequest.
        The result file and lifecycle settings

        :param result_settings: The result_settings of this PdfStamperJobRequest.
        :type: ResultSettings
        """

        self._result_settings = result_settings

    @property
    def config_ids(self):
        """
        Gets the config_ids of this PdfStamperJobRequest.
        A list of configuration ids that have to be applied during executing the job.

        :return: The config_ids of this PdfStamperJobRequest.
        :rtype: list[str]
        """
        return self._config_ids

    @config_ids.setter
    def config_ids(self, config_ids):
        """
        Sets the config_ids of this PdfStamperJobRequest.
        A list of configuration ids that have to be applied during executing the job.

        :param config_ids: The config_ids of this PdfStamperJobRequest.
        :type: list[str]
        """

        self._config_ids = config_ids

    @property
    def input_results(self):
        """
        Gets the input_results of this PdfStamperJobRequest.
        The input(s) and optional result(s)

        :return: The input_results of this PdfStamperJobRequest.
        :rtype: list[InputResultLocation]
        """
        return self._input_results

    @input_results.setter
    def input_results(self, input_results):
        """
        Sets the input_results of this PdfStamperJobRequest.
        The input(s) and optional result(s)

        :param input_results: The input_results of this PdfStamperJobRequest.
        :type: list[InputResultLocation]
        """

        self._input_results = input_results

    @property
    def form_fields(self):
        """
        Gets the form_fields of this PdfStamperJobRequest.
        A map with key-values used to input values in a PDF form.

        :return: The form_fields of this PdfStamperJobRequest.
        :rtype: dict(str, str)
        """
        return self._form_fields

    @form_fields.setter
    def form_fields(self, form_fields):
        """
        Sets the form_fields of this PdfStamperJobRequest.
        A map with key-values used to input values in a PDF form.

        :param form_fields: The form_fields of this PdfStamperJobRequest.
        :type: dict(str, str)
        """

        self._form_fields = form_fields

    @property
    def input_settings(self):
        """
        Gets the input_settings of this PdfStamperJobRequest.
        The input file and lifecycle settings

        :return: The input_settings of this PdfStamperJobRequest.
        :rtype: InputSettings
        """
        return self._input_settings

    @input_settings.setter
    def input_settings(self, input_settings):
        """
        Sets the input_settings of this PdfStamperJobRequest.
        The input file and lifecycle settings

        :param input_settings: The input_settings of this PdfStamperJobRequest.
        :type: InputSettings
        """

        self._input_settings = input_settings

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
