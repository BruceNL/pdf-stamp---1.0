# coding: utf-8

"""
    PDF stamper

    The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com

    OpenAPI spec version: 1.0
    Contact: dev@sphereon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ContentRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, variables=None, filename=None, config_ids=None, form_fields=None, content=None):
        """
        ContentRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'variables': 'dict(str, str)',
            'filename': 'str',
            'config_ids': 'list[str]',
            'form_fields': 'dict(str, str)',
            'content': 'str'
        }

        self.attribute_map = {
            'variables': 'variables',
            'filename': 'filename',
            'config_ids': 'configIds',
            'form_fields': 'formFields',
            'content': 'content'
        }

        self._variables = variables
        self._filename = filename
        self._config_ids = config_ids
        self._form_fields = form_fields
        self._content = content

    @property
    def variables(self):
        """
        Gets the variables of this ContentRequest.
        A map with key-values used to replace template variables in components.

        :return: The variables of this ContentRequest.
        :rtype: dict(str, str)
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """
        Sets the variables of this ContentRequest.
        A map with key-values used to replace template variables in components.

        :param variables: The variables of this ContentRequest.
        :type: dict(str, str)
        """

        self._variables = variables

    @property
    def filename(self):
        """
        Gets the filename of this ContentRequest.
        The filename

        :return: The filename of this ContentRequest.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """
        Sets the filename of this ContentRequest.
        The filename

        :param filename: The filename of this ContentRequest.
        :type: str
        """

        self._filename = filename

    @property
    def config_ids(self):
        """
        Gets the config_ids of this ContentRequest.
        A list of configuration ids that have to be applied during executing the job.

        :return: The config_ids of this ContentRequest.
        :rtype: list[str]
        """
        return self._config_ids

    @config_ids.setter
    def config_ids(self, config_ids):
        """
        Sets the config_ids of this ContentRequest.
        A list of configuration ids that have to be applied during executing the job.

        :param config_ids: The config_ids of this ContentRequest.
        :type: list[str]
        """

        self._config_ids = config_ids

    @property
    def form_fields(self):
        """
        Gets the form_fields of this ContentRequest.
        A map with key-values used to fill out PDF forms. Please not that this is different from using variables. Variables are used in texts, hyperlinks and barcodes

        :return: The form_fields of this ContentRequest.
        :rtype: dict(str, str)
        """
        return self._form_fields

    @form_fields.setter
    def form_fields(self, form_fields):
        """
        Sets the form_fields of this ContentRequest.
        A map with key-values used to fill out PDF forms. Please not that this is different from using variables. Variables are used in texts, hyperlinks and barcodes

        :param form_fields: The form_fields of this ContentRequest.
        :type: dict(str, str)
        """

        self._form_fields = form_fields

    @property
    def content(self):
        """
        Gets the content of this ContentRequest.
        The file as a base64 encoded string

        :return: The content of this ContentRequest.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this ContentRequest.
        The file as a base64 encoded string

        :param content: The content of this ContentRequest.
        :type: str
        """

        self._content = content

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
