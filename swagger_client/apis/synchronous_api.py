# coding: utf-8

"""
    PDF stamper

    The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com

    OpenAPI spec version: 1.0
    Contact: dev@sphereon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SynchronousApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def sync_job_content(self, content_request, **kwargs):
        """
        Execute a synchronous stamp job with a content request/response.
        Execute a synchronous stamp job using the given configId. Header parameters will be parsed for additional template variables.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sync_job_content(content_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ContentRequest content_request: File content (required)
        :return: ContentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.sync_job_content_with_http_info(content_request, **kwargs)
        else:
            (data) = self.sync_job_content_with_http_info(content_request, **kwargs)
            return data

    def sync_job_content_with_http_info(self, content_request, **kwargs):
        """
        Execute a synchronous stamp job with a content request/response.
        Execute a synchronous stamp job using the given configId. Header parameters will be parsed for additional template variables.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sync_job_content_with_http_info(content_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ContentRequest content_request: File content (required)
        :return: ContentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sync_job_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_request' is set
        if ('content_request' not in params) or (params['content_request'] is None):
            raise ValueError("Missing the required parameter `content_request` when calling `sync_job_content`")

        resource_path = '/sync/streams/content'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'content_request' in params:
            body_params = params['content_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json;charset=UTF-8'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json;charset=UTF-8'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ContentResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def sync_job_stream_location(self, job_request, **kwargs):
        """
        Execute a synchronous stamp job with a streamlocation.
        Execute a synchronous stamp job using the given configId. Header parameters will be parsed for additional template variables.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sync_job_stream_location(job_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PdfStamperJobRequest job_request: Job request (required)
        :return: PdfStamperJobResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.sync_job_stream_location_with_http_info(job_request, **kwargs)
        else:
            (data) = self.sync_job_stream_location_with_http_info(job_request, **kwargs)
            return data

    def sync_job_stream_location_with_http_info(self, job_request, **kwargs):
        """
        Execute a synchronous stamp job with a streamlocation.
        Execute a synchronous stamp job using the given configId. Header parameters will be parsed for additional template variables.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sync_job_stream_location_with_http_info(job_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PdfStamperJobRequest job_request: Job request (required)
        :return: PdfStamperJobResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sync_job_stream_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_request' is set
        if ('job_request' not in params) or (params['job_request'] is None):
            raise ValueError("Missing the required parameter `job_request` when calling `sync_job_stream_location`")

        resource_path = '/sync/streams/location'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'job_request' in params:
            body_params = params['job_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json;charset=UTF-8'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json;charset=UTF-8'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PdfStamperJobResult',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
